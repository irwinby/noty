// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/hereisajvi/noty/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, message
func (_m *MessageRepository) Create(ctx context.Context, message model.MessageDataAccessObject) (model.MessageBusinessObject, error) {
	ret := _m.Called(ctx, message)

	var r0 model.MessageBusinessObject
	if rf, ok := ret.Get(0).(func(context.Context, model.MessageDataAccessObject) model.MessageBusinessObject); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(model.MessageBusinessObject)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.MessageDataAccessObject) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MessageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - message model.MessageDataAccessObject
func (_e *MessageRepository_Expecter) Create(ctx interface{}, message interface{}) *MessageRepository_Create_Call {
	return &MessageRepository_Create_Call{Call: _e.mock.On("Create", ctx, message)}
}

func (_c *MessageRepository_Create_Call) Run(run func(ctx context.Context, message model.MessageDataAccessObject)) *MessageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.MessageDataAccessObject))
	})
	return _c
}

func (_c *MessageRepository_Create_Call) Return(_a0 model.MessageBusinessObject, _a1 error) *MessageRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MessageRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MessageRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MessageRepository_Expecter) Delete(ctx interface{}, id interface{}) *MessageRepository_Delete_Call {
	return &MessageRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MessageRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MessageRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MessageRepository_Delete_Call) Return(_a0 error) *MessageRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MessageRepository) List(ctx context.Context) ([]model.MessageBusinessObject, error) {
	ret := _m.Called(ctx)

	var r0 []model.MessageBusinessObject
	if rf, ok := ret.Get(0).(func(context.Context) []model.MessageBusinessObject); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MessageBusinessObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MessageRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessageRepository_Expecter) List(ctx interface{}) *MessageRepository_List_Call {
	return &MessageRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MessageRepository_List_Call) Run(run func(ctx context.Context)) *MessageRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessageRepository_List_Call) Return(_a0 []model.MessageBusinessObject, _a1 error) *MessageRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, id, messgae
func (_m *MessageRepository) Update(ctx context.Context, id string, messgae model.MessageDataAccessObject) (model.MessageBusinessObject, error) {
	ret := _m.Called(ctx, id, messgae)

	var r0 model.MessageBusinessObject
	if rf, ok := ret.Get(0).(func(context.Context, string, model.MessageDataAccessObject) model.MessageBusinessObject); ok {
		r0 = rf(ctx, id, messgae)
	} else {
		r0 = ret.Get(0).(model.MessageBusinessObject)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.MessageDataAccessObject) error); ok {
		r1 = rf(ctx, id, messgae)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MessageRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - messgae model.MessageDataAccessObject
func (_e *MessageRepository_Expecter) Update(ctx interface{}, id interface{}, messgae interface{}) *MessageRepository_Update_Call {
	return &MessageRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, messgae)}
}

func (_c *MessageRepository_Update_Call) Run(run func(ctx context.Context, id string, messgae model.MessageDataAccessObject)) *MessageRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.MessageDataAccessObject))
	})
	return _c
}

func (_c *MessageRepository_Update_Call) Return(_a0 model.MessageBusinessObject, _a1 error) *MessageRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMessageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessageRepository(t mockConstructorTestingTNewMessageRepository) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
