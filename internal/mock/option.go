// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	chi "github.com/go-chi/chi/v5"

	mock "github.com/stretchr/testify/mock"
)

// Option is an autogenerated mock type for the Option type
type Option struct {
	mock.Mock
}

type Option_Expecter struct {
	mock *mock.Mock
}

func (_m *Option) EXPECT() *Option_Expecter {
	return &Option_Expecter{mock: &_m.Mock}
}

// apply provides a mock function with given fields: router
func (_m *Option) apply(router chi.Router) {
	_m.Called(router)
}

// Option_apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'apply'
type Option_apply_Call struct {
	*mock.Call
}

// apply is a helper method to define mock.On call
//   - router chi.Router
func (_e *Option_Expecter) apply(router interface{}) *Option_apply_Call {
	return &Option_apply_Call{Call: _e.mock.On("apply", router)}
}

func (_c *Option_apply_Call) Run(run func(router chi.Router)) *Option_apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chi.Router))
	})
	return _c
}

func (_c *Option_apply_Call) Return() *Option_apply_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewOption creates a new instance of Option. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOption(t mockConstructorTestingTNewOption) *Option {
	mock := &Option{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
